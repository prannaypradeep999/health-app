generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HealthGoal {
  WEIGHT_LOSS
  MUSCLE_GAIN
  ENDURANCE
  GENERAL_WELLNESS
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String           // bcrypt hashed password
  firstName       String
  lastName        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  surveys         SurveyResponse[]
  activeSurveyId  String?          @unique
  activeSurvey    SurveyResponse?  @relation("ActiveSurvey", fields: [activeSurveyId], references: [id])
  
  // NEW: Meal planning relations
  mealPlans       MealPlan[]
  mealFeedback    MealFeedback[]
  userPreferences UserFoodPreferences?
}

model SurveyResponse {
  id              String     @id @default(cuid())
  
  // User connection (null for guests)
  userId          String?
  user            User?      @relation(fields: [userId], references: [id])
  activeForUser   User?      @relation("ActiveSurvey")
  
  // All survey data (stored for both guests and users)
  email           String
  firstName       String
  lastName        String
  age             Int
  sex             String
  height          String
  weight          Int
  zipCode         String
  goal            HealthGoal
  activityLevel   String
  budgetTier      String
  dietPrefs       String[]
  mealsOutPerWeek Int
  biomarkerJson   Json?
  source          String     @default("web")
  
  // Guest tracking
  isGuest         Boolean    @default(true)
  sessionId       String?    // For linking guest to browser session
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  @@index([userId])
  @@index([sessionId])
  @@index([email])
}

// NEW: Meal Planning Models

model MealPlan {
  id                String   @id @default(cuid())
  userId            String?  // Nullable for guest users
  user              User?    @relation(fields: [userId], references: [id])
  surveyId          String   // Link to survey data
  
  // Plan metadata
  weekOf            DateTime // Monday of the week
  status            String   @default("active") // "active", "completed", "archived"
  
  // Generation tracking
  generatedAt       DateTime @default(now())
  regenerationCount Int      @default(0) // Track regenerations (max 2)
  
  // Context used for generation (for debugging/improvement)
  userContext       Json
  
  // Relations
  meals             Meal[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
  @@index([surveyId])
  @@index([weekOf])
}

model Meal {
  id         String   @id @default(cuid())
  mealPlanId String
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  
  // Meal timing
  day        String   // "monday", "tuesday", etc.
  mealType   String   // "breakfast", "lunch", "dinner"
  
  // Meal options (always 2 options)
  options    MealOption[]
  
  // User choice tracking
  selectedOptionId String?
  selectedOption   MealOption? @relation("SelectedOption", fields: [selectedOptionId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([mealPlanId, day, mealType])
}

model MealOption {
  id       String @id @default(cuid())
  mealId   String
  meal     Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  
  // Option metadata
  optionNumber Int    // 1 or 2
  optionType   String // "restaurant" or "home"
  
  // Restaurant option fields
  restaurantName String?
  dishName       String?
  estimatedPrice Int?    // in cents
  orderingUrl    String? // DoorDash/delivery link
  deliveryTime   String? // "30-45 min"
  
  // Home cooking option fields
  recipeName     String?
  ingredients    String[]
  cookingTime    Int?     // minutes
  instructions   String?
  difficulty     String?  // "easy", "medium", "hard"
  
  // Nutritional info (for both types)
  calories       Int
  protein        Float
  carbs          Float
  fat            Float
  fiber          Float?
  sodium         Int?
  
  // User interaction
  wasEaten       Boolean @default(false)
  userRating     Int?    // 1-5 stars
  
  // Relations
  feedback       MealFeedback[]
  selectedForMeal Meal[] @relation("SelectedOption")
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([mealId, optionNumber])
}

model MealFeedback {
  id           String     @id @default(cuid())
  userId       String?
  user         User?      @relation(fields: [userId], references: [id])
  mealOptionId String
  mealOption   MealOption @relation(fields: [mealOptionId], references: [id], onDelete: Cascade)
  
  feedbackType String     // "loved", "liked", "disliked", "too_much", "too_little", "too_expensive", "cant_find"
  notes        String?
  
  createdAt    DateTime   @default(now())
  
  @@index([userId])
}

// User food preferences that evolve over time
model UserFoodPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Learned preferences
  preferredCuisines     String[] @default([])
  avoidedFoods          String[] @default([])
  portionSizeMultiplier Float    @default(1.0)
  
  // Spending patterns
  averageMealCost       Int?     // learned from actual orders
  budgetFlexibility     Float    @default(1.0) // how much over budget they're willing to go
  
  // Behavioral patterns  
  cookingDays           String[] @default([]) // days they prefer to cook
  restaurantDays        String[] @default([]) // days they prefer restaurants
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Cache for external API data (cost optimization)
model RestaurantCache {
  id          String   @id @default(cuid())
  zipcode     String
  cuisineType String?
  
  // Google Places data
  restaurants Json
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime // Cache for 7 days
  
  @@unique([zipcode, cuisineType])
}

model MenuCache {
  id            String   @id @default(cuid())
  restaurantName String
  location       String
  
  // Scraped menu data from DoorDash/etc
  menuData       Json
  
  createdAt      DateTime @default(now())
  expiresAt      DateTime // Cache for 3 days (menus change more frequently)
  
  @@unique([restaurantName, location])
}