generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HealthGoal {
  WEIGHT_LOSS
  MUSCLE_GAIN
  ENDURANCE
  GENERAL_WELLNESS
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  firstName       String
  lastName        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  surveys         SurveyResponse[]
  activeSurveyId  String?          @unique
  activeSurvey    SurveyResponse?  @relation("ActiveSurvey", fields: [activeSurveyId], references: [id])
  
  mealPlans       MealPlan[]
  mealFeedback    MealFeedback[]
  userPreferences UserFoodPreferences?
}

model SurveyResponse {
  id              String     @id @default(cuid())
  
  userId          String?
  user            User?      @relation(fields: [userId], references: [id])
  activeForUser   User?      @relation("ActiveSurvey")
  
  email           String
  firstName       String
  lastName        String
  age             Int
  sex             String
  height          String
  weight          Int
  zipCode         String
  goal            HealthGoal
  activityLevel   String
  budgetTier      String
  dietPrefs       String[]
  mealsOutPerWeek Int
  
  // New cuisine and food preferences
  preferredCuisines String[] @default([])
  preferredFoods    String[] @default([])
  
  biomarkerJson   Json?
  source          String     @default("web")
  
  isGuest         Boolean    @default(true)
  sessionId       String?
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  @@index([userId])
  @@index([sessionId])
  @@index([email])
}

model MealPlan {
  id                String   @id @default(cuid())
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])
  surveyId          String
  
  weekOf            DateTime
  status            String   @default("active")
  
  generatedAt       DateTime @default(now())
  regenerationCount Int      @default(0)
  
  userContext       Json
  
  meals             Meal[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
  @@index([surveyId])
  @@index([weekOf])
}

model Meal {
  id         String   @id @default(cuid())
  mealPlanId String
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  
  day        String
  mealType   String
  
  options    MealOption[]
  
  selectedOptionId String?
  selectedOption   MealOption? @relation("SelectedOption", fields: [selectedOptionId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([mealPlanId, day, mealType])
}

model MealOption {
  id       String @id @default(cuid())
  mealId   String
  meal     Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  
  optionNumber Int
  optionType   String
  
  restaurantName String?
  dishName       String?
  estimatedPrice Int?
  orderingUrl    String?
  deliveryTime   String?
  
  recipeName     String?
  ingredients    String[]
  cookingTime    Int?
  instructions   String?
  difficulty     String?
  
  calories       Int
  protein        Float
  carbs          Float
  fat            Float
  fiber          Float?
  sodium         Int?
  
  wasEaten       Boolean @default(false)
  userRating     Int?
  
  feedback       MealFeedback[]
  selectedForMeal Meal[] @relation("SelectedOption")
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([mealId, optionNumber])
}

model MealFeedback {
  id           String     @id @default(cuid())
  userId       String?
  user         User?      @relation(fields: [userId], references: [id])
  mealOptionId String
  mealOption   MealOption @relation(fields: [mealOptionId], references: [id], onDelete: Cascade)
  
  feedbackType String
  notes        String?
  
  createdAt    DateTime   @default(now())
  
  @@index([userId])
}

model UserFoodPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  preferredCuisines     String[] @default([])
  avoidedFoods          String[] @default([])
  portionSizeMultiplier Float    @default(1.0)
  
  averageMealCost       Int?
  budgetFlexibility     Float    @default(1.0)
  
  cookingDays           String[] @default([])
  restaurantDays        String[] @default([])
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model RestaurantCache {
  id          String   @id @default(cuid())
  zipcode     String
  cuisineType String?
  
  restaurants Json
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  @@unique([zipcode, cuisineType])
}

model MenuCache {
  id            String   @id @default(cuid())
  restaurantName String
  location       String
  
  menuData       Json
  
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  
  @@unique([restaurantName, location])
}